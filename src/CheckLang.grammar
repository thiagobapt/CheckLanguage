@top Program { statement* }

statement {  Assignment | expression ";" | If_Statement | While_Statement | For_Statement | Initialization | Function_Declaration | Return_Statement }

Initialization { "var" Name "=" expression ";" }

Assignment { Name "=" expression ";" }

If_Statement { "if" "(" Conditional_Expression ")" Statement_List Else_Statement? }

Else_Statement { "else" Statement_List }

While_Statement { "while" "(" Conditional_Expression ")" "{" statement "}" }

For_Statement { "for" "(" Assignment ";" Conditional_Expression ";" statement ")" Statement_List }

Return_Statement { "return" expression ";" }

Function_Call { Name "(" Parameter ")" }

Function_Declaration { "function" Name "(" Parameter_Declaration ")" Statement_List }

Statement_List { "{" statement* "}" }

Parameter { expression ( "," expression )* }

Parameter_Declaration { Types Name ( "," Types Name )* }

expression { term ( Expression_Operator term )? }

term { factor ( Term_Operator factor )? }

factor { Number | Name | String | Boolean | Function_Call | Array | "(" expression ")" }

Array { "[" expression ("," expression)* "]" }

Conditional_Expression { bool_term ( Or bool_term )? }

bool_term { conditional_factor ( And conditional_factor )? }

conditional_factor {
   expression Logical_Operator expression
   | "(" Conditional_Expression ")"
 }

@skip { 
  space | Comment
}

@tokens {
  Name { $[a-zA-Z]$[a-zA-Z0-9_]* }
  Number { @digit+ }
  Boolean { "true" | "false" }
  String { '"' (!["])* '"' }
  space { @whitespace+ }
  Comment { "/*" (![*/])*  "*/" }
  Or { "||" }
  And { "&&" }
  Logical_Operator { "==" | "!=" | "<" | "<=" | ">" | ">=" }
  Expression_Operator { "+" | "-" }
  Term_Operator { "*" | "/" | "%" }
  Types { "string" | "number" | "bool" | "array" }
  @precedence { "while", "if", "else", "for", "var", "function", "return", Boolean, Name }
  "(" ")" "{" "}" "=" ";" "," "/*" "*/" "[" "]"
}

@detectDelim